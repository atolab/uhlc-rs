var searchIndex = new Map(JSON.parse('[\
["uhlc",{"doc":"A Unique Hybrid Logical Clock.","t":"SFFFTFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNH","n":["CSIZE","HLC","HLCBuilder","ID","MAX_SIZE","NTP64","ParseIDError","ParseNTP64Error","ParseTimestampError","SizeError","Timestamp","add","add","add","add","add","add_assign","as_secs","as_secs_f64","as_u64","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","cause","cause","cause","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","default","default","deserialize","deserialize","deserialize","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","from_str","from_str","get_delta","get_diff_duration","get_id","get_id","get_time","hash","hash","hash","into","into","into","into","into","into","into","into","into","new","new","new_timestamp","partial_cmp","partial_cmp","partial_cmp","rand","serialize","serialize","serialize","size","sub","sub","sub","sub","sub","sub_assign","subsec_nanos","system_time_clock","to_duration","to_le_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_system_time","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_with_timestamp","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_clock","with_id","with_max_delta","zero_clock"],"q":[[0,"uhlc"],[229,"core::cmp"],[230,"core::result"],[231,"serde::de"],[232,"core::fmt"],[233,"core::fmt"],[234,"core::num::nonzero"],[235,"core::hash"],[236,"core::option"],[237,"serde::ser"],[238,"alloc::string"],[239,"std::time"],[240,"core::any"]],"d":["The size of counter part in <code>NTP64</code> (in bits)","An Hybric Logical Clock generating <code>Timestamp</code>s","The builder of <code>HLC</code>.","An identifier for an HLC (MAX_SIZE bytes maximum). This …","The maximum size of an le-encoded <code>ID</code> in bytes: 16.","A NTP 64-bits format as specified in RFC-5909","","","","","A timestamp made of a <code>NTP64</code> and a <code>crate::HLC</code>’s unique …","","","","","","","Returns the 32-bits seconds part.","Returns this NTP64 as a f64 in seconds.","Returns this NTP64 as a u64.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new <code>HLC</code> with a random u128 ID and using …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the HLC delta as <code>NTP64</code>.","","Returns the HLC <code>ID</code>.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs a new HLCBuilder for the creation of an <code>HLC</code>, …","","Generate a new <code>Timestamp</code>.","","","","Generate a random <code>ID</code>.","","","","The size of this <code>ID</code> in bytes. I.e., the number of …","","","","","","","Returns the 32-bits fraction of second part converted to …","A physical clock relying on std::time::SystemTime::now().","Convert to a <code>Duration</code>.","This ID as bytes","","","","","","","","","","","","Convert to a <code>SystemTime</code> (making the assumption that this …","","","Performs the conversion. NOTE: the bytes slice is …","Performs the conversion. NOTE: the bytes slice is …","Performs the conversion. NOTE: the bytes slice is …","Performs the conversion. NOTE: the bytes slice is …","Performs the conversion. NOTE: the bytes slice is …","Performs the conversion. NOTE: the bytes slice is …","Performs the conversion. NOTE: the bytes slice is …","Performs the conversion. NOTE: the bytes slice is …","Performs the conversion. NOTE: the bytes slice is …","Performs the conversion. NOTE: the bytes slice is …","Performs the conversion. NOTE: the bytes slice is …","Performs the conversion. NOTE: the bytes slice is …","Performs the conversion. NOTE: the bytes slice is …","Performs the conversion. NOTE: the bytes slice is …","","Performs the conversion. NOTE: the bytes slice is …","Performs the conversion. NOTE: the bytes slice is …","Performs the conversion. NOTE: the bytes slice is …","Performs the conversion. NOTE: the bytes slice is …","Performs the conversion. NOTE: the bytes slice is …","","Performs the conversion. NOTE: the bytes slice is …","Performs the conversion. NOTE: the bytes slice is …","","Performs the conversion. NOTE: the bytes slice is …","Performs the conversion. NOTE: the bytes slice is …","Performs the conversion. NOTE: the bytes slice is …","Performs the conversion. NOTE: the bytes slice is …","Performs the conversion. NOTE: the bytes slice is …","","Performs the conversion. NOTE: the bytes slice is …","Performs the conversion. NOTE: the bytes slice is …","","Performs the conversion. NOTE: the bytes slice is …","Performs the conversion. NOTE: the bytes slice is …","","Performs the conversion. NOTE: the bytes slice is …","Performs the conversion. NOTE: the bytes slice is …","Performs the conversion. NOTE: the bytes slice is …","","","","","","","","","","","","","","","","","","","","","","","","","Update this <code>HLC</code> with a <code>Timestamp</code>.","","","","","","","","","","Configure a specific physical clock for the HLC to be …","Configure a specific identifier for the HLC to be created.","Configure the maximum delta accepted by an HLC when …","A dummy clock that returns a NTP64 initialized with the …"],"i":[0,0,0,0,8,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,6,7,8,9,10,1,11,12,13,6,7,8,9,10,1,11,12,13,6,10,11,13,8,9,10,1,11,12,13,8,9,10,1,11,12,13,8,1,12,6,7,1,8,1,12,8,10,1,11,12,13,8,8,9,9,10,1,1,11,12,12,13,6,7,8,8,8,8,8,8,9,10,1,1,11,12,13,8,1,12,7,12,7,12,12,8,1,12,6,7,8,9,10,1,11,12,13,6,12,7,8,1,12,8,8,1,12,8,1,1,1,1,1,1,1,0,1,8,8,9,10,1,11,12,13,8,9,1,12,1,6,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,10,1,11,12,13,6,7,8,9,10,1,11,12,13,6,7,8,9,10,1,11,12,13,7,6,7,8,9,10,1,11,12,13,6,6,6,0],"f":"```````````{{bb}}00{{bd}b}{{bb}b}{{bd}f}{bh}{bj}{bd}{ce{}{}}00000000000000000{ln}```{A`A`}{AbAb}{AdAd}{bb}{AfAf}{AhAh}{AjAj}{{ce}f{}{}}000000{{A`A`}Al}{{bb}Al}{{AhAh}Al}{{}l}{{}n}{{}b}{c{{An{A`}}}B`}{c{{An{b}}}B`}{c{{An{Ah}}}B`}{{A`A`}Bb}{{AdAd}Bb}{{bb}Bb}{{AfAf}Bb}{{AhAh}Bb}{{AjAj}Bb}{{A`Bd}Bf}0{{AbBd}Bf}0{{AdBd}Bf}{{bBd}Bf}0{{AfBd}Bf}{{AhBd}Bf}0{{AjBd}Bf}{cc{}}00{BhA`}{BjA`}{BlA`}{BnA`}{C`A`}55{Cbb}6666{Cd{{An{A`c}}}{}}{Cd{{An{bc}}}{}}{Cd{{An{Ahc}}}{}}{nb}{{AhAh}Cb}{nA`}{AhA`}{Ahb}{{A`c}fCf}{{bc}fCf}{{Ahc}fCf}{ce{}{}}00000000{{}l}{{bA`}Ah}{nAh}{{A`A`}{{Ch{Al}}}}{{bb}{{Ch{Al}}}}{{AhAh}{{Ch{Al}}}}{{}A`}{{A`c}AnCj}{{bc}AnCj}{{Ahc}AnCj}{A`Cl}{{bb}}{{bb}b}{{bd}b}22{{bd}f}{bh}{{}b}{bCb}{A`{{D`{Cn}}}}{ce{}{}}000000{cDb{}}000{bDd}{c{{An{e}}}{}{}}0{{{D`{Cn}}}{{An{A`c}}}{}}0000000000000{Df{{An{A`c}}}{}}11111{Dh{{An{A`c}}}{}}22322222{d{{An{A`c}}}{}}3{{{Dj{Cn}}}{{An{A`c}}}{}}{h{{An{A`c}}}{}}55{Cn{{An{A`c}}}{}}666777777777777777{cDl{}}00000000{{nAh}{{An{fDb}}}}<<<<<<<<<{ll}{{lA`}l}{{lCb}l}{{}b}","c":[],"p":[[5,"NTP64",0],[1,"u64"],[1,"unit"],[1,"u32"],[1,"f64"],[5,"HLCBuilder",0],[5,"HLC",0],[5,"ID",0],[5,"SizeError",0],[5,"ParseIDError",0],[5,"ParseNTP64Error",0],[5,"Timestamp",0],[5,"ParseTimestampError",0],[6,"Ordering",229],[6,"Result",230],[10,"Deserializer",231],[1,"bool"],[5,"Formatter",232],[8,"Result",232],[8,"NonZeroU32",233],[8,"NonZeroU8",233],[8,"NonZeroU128",233],[8,"NonZeroU16",233],[8,"NonZeroU64",233],[5,"Duration",234],[1,"str"],[10,"Hasher",235],[6,"Option",236],[10,"Serializer",237],[1,"usize"],[1,"u8"],[1,"array"],[5,"String",238],[5,"SystemTime",239],[1,"u16"],[1,"u128"],[1,"slice"],[5,"TypeId",240]],"b":[[11,"impl-Add%3CNTP64%3E-for-%26NTP64"],[12,"impl-Add%3C%26NTP64%3E-for-%26NTP64"],[13,"impl-Add%3C%26NTP64%3E-for-NTP64"],[14,"impl-Add%3Cu64%3E-for-NTP64"],[15,"impl-Add-for-NTP64"],[71,"impl-Display-for-ID"],[72,"impl-Debug-for-ID"],[73,"impl-Debug-for-SizeError"],[74,"impl-Display-for-SizeError"],[76,"impl-Display-for-NTP64"],[77,"impl-Debug-for-NTP64"],[79,"impl-Display-for-Timestamp"],[80,"impl-Debug-for-Timestamp"],[85,"impl-From%3CNonZero%3Cu32%3E%3E-for-ID"],[86,"impl-From%3CNonZero%3Cu8%3E%3E-for-ID"],[87,"impl-From%3CNonZero%3Cu128%3E%3E-for-ID"],[88,"impl-From%3CNonZero%3Cu16%3E%3E-for-ID"],[89,"impl-From%3CNonZero%3Cu64%3E%3E-for-ID"],[128,"impl-Sub%3CNTP64%3E-for-%26NTP64"],[129,"impl-Sub-for-NTP64"],[130,"impl-Sub%3Cu64%3E-for-NTP64"],[131,"impl-Sub%3C%26NTP64%3E-for-%26NTP64"],[132,"impl-Sub%3C%26NTP64%3E-for-NTP64"],[152,"impl-TryFrom%3C%26%5Bu8;+7%5D%3E-for-ID"],[153,"impl-TryFrom%3C%26%5Bu8;+5%5D%3E-for-ID"],[154,"impl-TryFrom%3C%5Bu8;+8%5D%3E-for-ID"],[155,"impl-TryFrom%3C%26%5Bu8;+13%5D%3E-for-ID"],[156,"impl-TryFrom%3C%5Bu8;+5%5D%3E-for-ID"],[157,"impl-TryFrom%3C%26%5Bu8;+11%5D%3E-for-ID"],[158,"impl-TryFrom%3C%5Bu8;+4%5D%3E-for-ID"],[159,"impl-TryFrom%3C%5Bu8;+11%5D%3E-for-ID"],[160,"impl-TryFrom%3C%5Bu8;+16%5D%3E-for-ID"],[161,"impl-TryFrom%3C%5Bu8;+14%5D%3E-for-ID"],[162,"impl-TryFrom%3C%5Bu8;+3%5D%3E-for-ID"],[163,"impl-TryFrom%3C%5Bu8;+2%5D%3E-for-ID"],[164,"impl-TryFrom%3C%26%5Bu8;+15%5D%3E-for-ID"],[165,"impl-TryFrom%3C%5Bu8;+7%5D%3E-for-ID"],[166,"impl-TryFrom%3Cu16%3E-for-ID"],[167,"impl-TryFrom%3C%26%5Bu8;+1%5D%3E-for-ID"],[168,"impl-TryFrom%3C%26%5Bu8;+10%5D%3E-for-ID"],[169,"impl-TryFrom%3C%26%5Bu8;+9%5D%3E-for-ID"],[170,"impl-TryFrom%3C%5Bu8;+13%5D%3E-for-ID"],[171,"impl-TryFrom%3C%26%5Bu8;+4%5D%3E-for-ID"],[172,"impl-TryFrom%3Cu128%3E-for-ID"],[173,"impl-TryFrom%3C%5Bu8;+9%5D%3E-for-ID"],[174,"impl-TryFrom%3C%26%5Bu8;+6%5D%3E-for-ID"],[176,"impl-TryFrom%3C%26%5Bu8;+8%5D%3E-for-ID"],[177,"impl-TryFrom%3C%26%5Bu8;+3%5D%3E-for-ID"],[178,"impl-TryFrom%3C%26%5Bu8;+12%5D%3E-for-ID"],[179,"impl-TryFrom%3C%5Bu8;+12%5D%3E-for-ID"],[180,"impl-TryFrom%3C%5Bu8;+1%5D%3E-for-ID"],[181,"impl-TryFrom%3Cu64%3E-for-ID"],[182,"impl-TryFrom%3C%5Bu8;+6%5D%3E-for-ID"],[183,"impl-TryFrom%3C%26%5Bu8%5D%3E-for-ID"],[184,"impl-TryFrom%3Cu32%3E-for-ID"],[185,"impl-TryFrom%3C%5Bu8;+15%5D%3E-for-ID"],[186,"impl-TryFrom%3C%26%5Bu8;+16%5D%3E-for-ID"],[187,"impl-TryFrom%3Cu8%3E-for-ID"],[188,"impl-TryFrom%3C%5Bu8;+10%5D%3E-for-ID"],[189,"impl-TryFrom%3C%26%5Bu8;+2%5D%3E-for-ID"],[190,"impl-TryFrom%3C%26%5Bu8;+14%5D%3E-for-ID"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
