var searchIndex = JSON.parse('{\
"uhlc":{"doc":"A Unique Hybrid Logical Clock.","t":[3,3,12,3,12,3,12,3,3,12,17,17,3,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,11,11,11,11,11,11,11,11,11,11,11],"n":["ID","ParseIDError","cause","NTP64","0","ParseNTP64Error","cause","Timestamp","ParseTimestampError","cause","CSIZE","DELTA_MS","HLC","with_clock","with_system_time","new_timestamp","update_with_timestamp","system_time_clock","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","from","into","borrow","borrow_mut","try_from","try_into","type_id","from","from","clone","clone","clone","clone","clone","clone","default","default","cmp","cmp","cmp","eq","eq","ne","eq","ne","eq","ne","eq","ne","eq","ne","partial_cmp","partial_cmp","partial_cmp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","sub","add","add","add","add_assign","hash","try_from","from_str","from_str","from_str","MAX_SIZE","new","size","as_slice","as_u64","as_secs","subsec_nanos","to_duration","to_system_time","new","get_time","get_id"],"q":["uhlc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An identifier for an HLC (MAX_SIZE bytes maximum). This …","","","A NTP 64-bits format as specified in RFC-5909","","","","A timestamp made of a [<code>NTP64</code>] and a [<code>crate::HLC</code>]’s …","","","The size of counter part in [<code>NTP64</code>] (in bits)","HLC Delta in milliseconds: maximum accepted drift for an …","An Hybric Logical Clock generating [<code>Timestamp</code>]s","Create a new [<code>HLC</code>] with an <code>id</code> (must be unique) and a <code>clock</code>…","Create a new [<code>HLC</code>] with an <code>id</code> (must be unique) and using […","Generate a new [<code>Timestamp</code>].","Update this [<code>HLC</code>] with a [<code>Timestamp</code>].","A physical clock relying on std::time::SystemTime::now().","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new [<code>HLC</code>] with a generated UUID and using […","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The maximum size of an ID in bytes: 16.","Create a new ID with the “<code>size</code>” first bytes of “<code>id</code>…","The size of this ID in bytes","This ID as a slice","Returns this NTP64 as a u64.","Returns the 32-bits seconds part.","Returns the 32-bits fraction of second part converted to …","Convert to a [<code>Duration</code>].","Convert to a [<code>SystemTime</code>] (making the assumption that …","","",""],"i":[0,0,1,0,2,0,3,0,0,4,0,0,0,5,5,5,5,0,6,6,6,6,6,6,6,6,6,6,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,7,7,7,7,7,7,7,7,7,7,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,6,2,6,1,2,3,7,4,2,5,6,2,7,6,1,1,2,2,3,3,7,7,4,4,6,2,7,6,1,2,3,7,4,6,2,7,2,2,2,2,2,6,6,6,2,7,6,6,6,6,2,2,2,2,2,7,7,7],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,[[["id",3]],["hlc",3]],[[["id",3]],["hlc",3]],[[],["timestamp",3]],[[["timestamp",3]],[["result",4],["string",3]]],[[],["ntp64",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["uuid",3]]],[[["duration",3]],["ntp64",3]],[[],["id",3]],[[],["parseiderror",3]],[[],["ntp64",3]],[[],["parsentp64error",3]],[[],["timestamp",3]],[[],["parsetimestamperror",3]],[[],["ntp64",3]],[[]],[[],["ordering",4]],[[["ntp64",3]],["ordering",4]],[[["timestamp",3]],["ordering",4]],[[],["bool",15]],[[["parseiderror",3]],["bool",15]],[[["parseiderror",3]],["bool",15]],[[["ntp64",3]],["bool",15]],[[["ntp64",3]],["bool",15]],[[["parsentp64error",3]],["bool",15]],[[["parsentp64error",3]],["bool",15]],[[["timestamp",3]],["bool",15]],[[["timestamp",3]],["bool",15]],[[["parsetimestamperror",3]],["bool",15]],[[["parsetimestamperror",3]],["bool",15]],[[],[["option",4],["ordering",4]]],[[["ntp64",3]],[["ordering",4],["option",4]]],[[["timestamp",3]],[["ordering",4],["option",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["ntp64",3]]],[[["u64",15]]],[[["u64",15]]],[[]],[[],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],null,[[["usize",15]],["id",3]],[[],["usize",15]],[[]],[[],["u64",15]],[[],["u32",15]],[[],["u32",15]],[[],["duration",3]],[[],["systemtime",3]],[[["id",3],["ntp64",3]],["timestamp",3]],[[],["ntp64",3]],[[],["id",3]]],"p":[[3,"ParseIDError"],[3,"NTP64"],[3,"ParseNTP64Error"],[3,"ParseTimestampError"],[3,"HLC"],[3,"ID"],[3,"Timestamp"]]}\
}');
initSearch(searchIndex);